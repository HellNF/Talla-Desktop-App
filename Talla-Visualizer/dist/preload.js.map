{"version":3,"file":"preload.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;UCrBA;;;;;;;ACDA;AACA;AACA,MAAM;EAAEA,aAAa;EAAEC;AAAY,CAAC,GAAGC,mBAAO,CAAC,0BAAU,CAAC;AAE1DF,aAAa,CAACG,iBAAiB,CAAC,aAAa,EAAE;EAC7CC,MAAM,EAAEA,CAACC,OAAO,EAAEC,IAAI,KAAKL,WAAW,CAACG,MAAM,CAACC,OAAO,EAAEC,IAAI,CAAC;EAC5DC,IAAI,EAAEA,CAACF,OAAO,EAAEG,IAAI,KAAKP,WAAW,CAACM,IAAI,CAACF,OAAO,EAAEG,IAAI,CAAC;EACxDC,EAAE,EAAEA,CAACJ,OAAO,EAAEK,IAAI,KAAKT,WAAW,CAACQ,EAAE,CAACJ,OAAO,EAAEK,IAAI,CAAC;EACpDC,cAAc,EAAEA,CAACN,OAAO,EAAEK,IAAI,KAAKT,WAAW,CAACU,cAAc,CAACN,OAAO,EAAEK,IAAI,CAAC;EAC5EE,GAAG,EAAEA,CAACP,OAAO,EAAEK,IAAI,KAAKT,WAAW,CAACW,GAAG,CAACP,OAAO,EAAEK,IAAI;AACvD,CAAC,CAAC,C","sources":["webpack://talla-visualizer/external node-commonjs \"electron\"","webpack://talla-visualizer/webpack/bootstrap","webpack://talla-visualizer/webpack/runtime/compat","webpack://talla-visualizer/./src/preload.js"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/native_modules/\";","// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  invoke: (channel, args) => ipcRenderer.invoke(channel, args),\n  send: (channel, data) => ipcRenderer.send(channel, data),\n  on: (channel, func) => ipcRenderer.on(channel, func),\n  removeListener: (channel, func) => ipcRenderer.removeListener(channel, func),\n  off: (channel, func) => ipcRenderer.off(channel, func),\n});"],"names":["contextBridge","ipcRenderer","require","exposeInMainWorld","invoke","channel","args","send","data","on","func","removeListener","off"],"sourceRoot":""}